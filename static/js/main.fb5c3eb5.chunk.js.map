{"version":3,"sources":["Card.js","CardList.js","Scroll.js","SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","Scroll","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAeeA,EAbF,SAACC,GACb,IAAQC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,MAAOC,EAAIH,EAAJG,GACrB,OACC,sBAAKC,UAAU,mDAAf,UACC,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACC,6BAAKF,IACL,4BAAIC,WCcOK,EAnBC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,8BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCDGC,EARA,SAACZ,GACf,OACE,qBAAKa,MAAO,CAACC,UAAW,SAAUC,OAAQ,iBAAkBC,OAAQ,SAApE,SACEhB,EAAMiB,YCWIC,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACE,qBAAKf,UAAU,MAAf,SACC,uBACAA,UAAU,gCACVgB,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCkCCI,E,kDApCb,aAAe,IAAD,8BACZ,gBAeJC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAfxC,EAAKC,MAAQ,CACXtB,OAAQ,GACRmB,YAAa,IAJH,E,qDAQhB,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GACL,OAAOA,EAASC,UACdF,MAAK,SAAAG,GACN,EAAKT,SAAS,CAAElB,OAAQ2B,S,oBAO5B,WAAS,IAAD,OACAC,EAAiBC,KAAKP,MAAMtB,OAAO8B,QAAO,SAAA9B,GAC9C,OAAOA,EAAOP,KAAKsC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAEnE,OACE,sBAAKnC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,wBACA,cAAC,EAAD,CAAWe,aAAckB,KAAKb,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUhB,OAAQ4B,a,GA9BRK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,YCGdO,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.fb5c3eb5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\tconst { name, email, id}=props;\n\treturn (\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?100x100`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList =({ robots }) => {\n\treturn (\n\t\t\t<div>\n\t\t\t\t{\n\t\t\t\t\trobots.map((user ,i) =>{\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\t\tid={robots[i].id}\n\t\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\t\temail={robots[i].email} \n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) =>{\n\treturn(\n\t\t\t<div style={{overflowY: 'scroll', border: '5x solid black', height: '800px'}}>\n\t\t\t\t{props.children}\n\t\t\t\t</div>\n\t\t\t);\n}\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn(\n\t\t\t<div className='pa2'>\n\t\t\t\t<input \n\t\t\t\tclassName='pa3 b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange={searchChange}\n\n\t\t\t\t />\n\t\t\t </div>\n\t\t);\n}\n\nexport default SearchBox;","import React, {Component} from 'react';\nimport CardList from './CardList';\n//import { robots } from './robots';\nimport Scroll from './Scroll'\nimport SearchBox from './SearchBox'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response=>{\n   return response.json();\n  }).then(users=>{\n    this.setState({ robots: users})\n  });\n}\nonSearchChange = (event) => {\n  this.setState({ searchfield: event.target.value })\n  //console.log(event.target.value);\n}\nrender(){\n  const filteredRobots = this.state.robots.filter(robots =>{\n    return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n  })\n  return (\n    <div className='tc'>\n      <h1 className='f1'>Robofiends</h1>\n      <SearchBox searchChange={this.onSearchChange} />\n      <Scroll>\n        <CardList robots={filteredRobots} />\n      </Scroll>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import CardList from './CardList';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport './App.css'\n//import { robots } from './robots';\n\nReactDOM.render(\n  //<Hello greeting={'Hello Ninza'} />\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}